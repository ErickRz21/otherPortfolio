<section class="main__container" id="picture" tabindex="-1">
      <h2 class="mt-0">Pictures</h2>
      <p class="mb-3">
        Feel free to browse through the gallery and enjoy the moments captured in
        these images. Each picture tells a story and holds a special memory from my
        adventures around the world.
      </p>

      <!-- Slider Container -->
      <div class="relative overflow-hidden rounded-2xl lg:h-[50rem]">
        <!-- Slider Track -->
        <div
          id="sliderTrack"
          class="flex transition-transform duration-500 ease-in-out h-full"
        >
          <img
            src="Solitud.jpg"
            alt="Thumbnail 1"
            class="w-full flex-shrink-0 object-cover"
            data-highres="Solitud.jpg"
          />
          <img
            src="Forest.jpg"
            alt="Thumbnail 2"
            class="w-full flex-shrink-0 object-cover"
            data-highres="Forest.jpg"
          />
          <img
            src="Waters.jpg"
            alt="Thumbnail 3"
            class="w-full flex-shrink-0 object-cover"
            data-highres="Waters.jpg"
          />
          <img
            src="Rock.jpg"
            alt="Thumbnail 4"
            class="w-full flex-shrink-0 object-cover"
            data-highres="Rock.jpg"
          />
        </div>

        <!-- Navigation Buttons -->
        <button
          id="prevButton"
          class="absolute top-1/2 left-3 transform -translate-y-1/2 bg-gray-700/50 rounded-full p-2 text-white hover:bg-gray-600/70 transition duration-300"
        >
          &larr;
        </button>
        <button
          id="nextButton"
          class="absolute top-1/2 right-3 transform -translate-y-1/2 bg-gray-700/50 rounded-full p-2 text-white hover:bg-gray-600/70 transition duration-300"
        >
          &rarr;
        </button>

        <!-- Pagination Dots -->
        <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2 pagination-dots">
          <button
            class="w-2 h-2 bg-white/50 rounded-full hover:bg-white transition duration-300"
          ></button>
          <button
            class="w-2 h-2 bg-white/50 rounded-full hover:bg-white transition duration-300"
          ></button>
          <button
            class="w-2 h-2 bg-white/50 rounded-full hover:bg-white transition duration-300"
          ></button>
          <button
            class="w-2 h-2 bg-white/50 rounded-full hover:bg-white transition duration-300"
          ></button>
        </div>
      </div>
    </section>
<!-- Modal -->
<div
  id="imageModal"
  class="hidden fixed inset-0 bg-black/90 items-center justify-center z-50"
  role="dialog"
  aria-modal="true"
>
  <div>
    <!-- Close Button -->
    <button
      class="absolute top-5 left-5 text-white/70 text-4xl lg:text-5xl hover:scale-105 active:scale-95 duration-500"
      id="closeModalButton"
      aria-label="Close modal"
    >
      <div class="px-3 bg-neutral-800/70 rounded-full">
        <span class="relative top-[-0.03em] font-extralight">&times;</span>
      </div>
    </button>
    <!-- Full Image -->
    <div>
      <img id="modalImage" class="max-w-full max-h-screen" alt="Full Image" />
    </div>
  </div>
</div>

<!-- Custom Script -->
<script>
  import { gsap } from "gsap";
  document.addEventListener("DOMContentLoaded", () => {
    // Slider Functionality
    const sliderTrack = document.getElementById("sliderTrack");
    const prevButton = document.getElementById("prevButton");
    const nextButton = document.getElementById("nextButton");
    const paginationDots = document.querySelectorAll(".pagination-dots button");

    // Check if all required elements exist
    if (
      !sliderTrack ||
      !prevButton ||
      !nextButton ||
      paginationDots.length === 0
    ) {
      console.error(
        "Slider elements not found. Please check the HTML structure."
      );
      return;
    }

    const images = document.querySelectorAll("#sliderTrack img");
    let currentIndex = 0;

    // Update slider position
    const updateSlider = () => {
      const offset = -currentIndex * 100;
      sliderTrack.style.transform = `translateX(${offset}%)`;
      updatePaginationDots();
    };

    // Update active pagination dot
    const updatePaginationDots = () => {
      paginationDots.forEach((dot, index) => {
        dot.classList.toggle("bg-white", index === currentIndex);
        dot.classList.toggle("bg-white/50", index !== currentIndex);
      });
    };

    // Previous Button Click Handler
    prevButton.addEventListener("click", () => {
      if (currentIndex > 0) {
        currentIndex--;
      } else {
        currentIndex = images.length - 1; // Loop to the last image
      }
      updateSlider();
    });

    // Next Button Click Handler
    nextButton.addEventListener("click", () => {
      if (currentIndex < images.length - 1) {
        currentIndex++;
      } else {
        currentIndex = 0; // Loop to the first image
      }
      updateSlider();
    });

    // Pagination Dot Click Handler
    paginationDots.forEach((dot, index) => {
      dot.addEventListener("click", () => {
        currentIndex = index;
        updateSlider();
      });
    });

    // Optional: Auto-slide every 5 seconds
    let autoSlideInterval = setInterval(() => {
      if (currentIndex < images.length - 1) {
        currentIndex++;
      } else {
        currentIndex = 0;
      }
      updateSlider();
    }, 5000);

    // Optional: Pause auto-slide on hover
    sliderTrack.addEventListener("mouseenter", () => {
      clearInterval(autoSlideInterval);
    });

    sliderTrack.addEventListener("mouseleave", () => {
      autoSlideInterval = setInterval(() => {
        if (currentIndex < images.length - 1) {
          currentIndex++;
        } else {
          currentIndex = 0;
        }
        updateSlider();
      }, 5000);
    });

    // Initialize active dot
    updatePaginationDots();

    // Modal Functionality
    const thumbnails = document.querySelectorAll(
      ".main__container img[data-highres]"
    );
    const modal = document.getElementById("imageModal");
    const modalImage = document.getElementById("modalImage") as HTMLImageElement;
    const closeModalButton = document.getElementById("closeModalButton");

    // Debugging: Check if elements exist
    if (!modal) return console.error("Modal element not found.");
    if (!modalImage) return console.error("Modal image element not found.");
    if (!closeModalButton) return console.error("Close button not found.");

    // Open Modal Function
    const openModal = (src: string) => {
      console.log("Opening modal for image:", src);
      modalImage.src = src;
      modal.classList.remove("hidden");
      modal.classList.add("flex");
      gsap.fromTo(
        modal,
        { opacity: 0, scale: 0.2 }, // Start slightly smaller
        {
          duration: 0.3, // Slightly longer duration
          opacity: 1,
          scale: 1,
          ease: "power2.out", // Smooth easing for a better feel
        }
      );
    };

    // Close Modal Function
    const closeModal = () => {
      console.log("Closing modal");
      gsap.to(modal, {
        duration: 0.3, // Slightly quicker close
        opacity: 0,
        scale: 0.95, // Shrink slightly
        ease: "power2.out", // Smooth easing for closing
        onComplete: () => {
          modal.classList.add("hidden");
          modal.classList.remove("flex");
          modalImage.src = ""; // Clear image source for accessibility
        },
      });
    };

    // Thumbnail Click Listener
    thumbnails.forEach((thumbnail) => {
      thumbnail.addEventListener("click", () => {
        const highresSrc = thumbnail.getAttribute("data-highres");
        if (highresSrc) {
          openModal(highresSrc);
        } else {
          console.warn("High-res image source not found.");
        }
      });
    });

    // Close Button Listener
    closeModalButton.addEventListener("click", closeModal);

    // Escape Key Listener
    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        closeModal();
      }
    });

    // Outside Modal Click Listener
    modal.addEventListener("click", (event) => {
      if (event.target === modal) {
        closeModal();
      }
    });
  });
</script>
